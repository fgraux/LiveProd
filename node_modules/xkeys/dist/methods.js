"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listAllConnectedPanels = exports.setupXkeysPanel = void 0;
const core_1 = require("@xkeys-lib/core");
const core_2 = require("@xkeys-lib/core");
const HID = require("node-hid");
const node_hid_wrapper_1 = require("./node-hid-wrapper");
const lib_1 = require("./lib");
async function setupXkeysPanel(devicePathOrHIDDevice) {
    let devicePath;
    let device;
    let deviceInfo;
    if (!devicePathOrHIDDevice) {
        // Device not provided, will then select any connected device:
        const connectedXkeys = listAllConnectedPanels();
        if (!connectedXkeys.length) {
            throw new Error('Could not find any connected X-keys panels.');
        }
        // Just select the first one:
        devicePath = connectedXkeys[0].path;
        device = new HID.HID(devicePath);
        deviceInfo = {
            product: connectedXkeys[0].product,
            productId: connectedXkeys[0].productId,
            interface: connectedXkeys[0].interface,
        };
    }
    else if (lib_1.isHID_Device(devicePathOrHIDDevice)) {
        // is HID.Device
        if (!devicePathOrHIDDevice.path)
            throw new Error('HID.Device path not set!');
        devicePath = devicePathOrHIDDevice.path;
        device = new HID.HID(devicePath);
        deviceInfo = {
            product: devicePathOrHIDDevice.product,
            productId: devicePathOrHIDDevice.productId,
            interface: devicePathOrHIDDevice.interface,
        };
    }
    else if (lib_1.isHID_HID(devicePathOrHIDDevice)) {
        // is HID.HID
        device = devicePathOrHIDDevice;
        devicePath = devicePathOrHIDDevice.devicePath;
        // deviceInfo is set later
    }
    else if (typeof devicePathOrHIDDevice === 'string') {
        // is string (path)
        devicePath = devicePathOrHIDDevice;
        device = new HID.HID(devicePath);
        // deviceInfo is set later
    }
    else {
        throw new Error('setupXkeysPanel: invalid arguments');
    }
    if (!deviceInfo) {
        // Look through HID.devices(), bevause HID.Device contains the productId
        for (const hidDevice of HID.devices()) {
            if (hidDevice.path === devicePath) {
                deviceInfo = {
                    product: hidDevice.product,
                    productId: hidDevice.productId,
                    interface: hidDevice.interface,
                };
                break;
            }
        }
    }
    if (!device)
        throw new Error('Error setting up X-keys: device not found');
    if (!devicePath)
        throw new Error('Error setting up X-keys: devicePath not found');
    if (!deviceInfo)
        throw new Error('Error setting up X-keys: deviceInfo not found');
    const deviceWrap = new node_hid_wrapper_1.NodeHIDDevice(device);
    const xkeys = new core_1.XKeys(deviceWrap, deviceInfo, devicePath);
    // Wait for the device to initialize:
    await xkeys.init();
    return xkeys;
}
exports.setupXkeysPanel = setupXkeysPanel;
/** Returns a list of all connected X-keys-HID-devices */
function listAllConnectedPanels() {
    const connectedXkeys = HID.devices().filter((device) => {
        // Filter to only return the supported devices:
        if (device.vendorId !== core_1.XKeys.vendorId)
            return false;
        if (!device.path)
            return false;
        let found = false;
        for (const product of Object.values(core_2.PRODUCTS)) {
            for (const hidDevice of product.hidDevices) {
                if (hidDevice[0] === device.productId && hidDevice[1] === device.interface) {
                    found = true;
                    break;
                }
            }
            if (found)
                break;
        }
        return found;
    });
    return connectedXkeys;
}
exports.listAllConnectedPanels = listAllConnectedPanels;
//# sourceMappingURL=methods.js.map