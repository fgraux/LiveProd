/// <reference types="node" />
import { EventEmitter } from 'events';
export interface Device {
    vendorId: number;
    productId: number;
    path?: string;
    serialNumber?: string;
    manufacturer?: string;
    product?: string;
    release: number;
    interface: number;
    usagePage?: number;
    usage?: number;
}
export declare function setMockWriteHandler(handler: (hid: HID, message: number[]) => void): void;
export declare class HID extends EventEmitter {
    private mockWriteHandler;
    constructor(_path: string);
    close(): void;
    pause(): void;
    read(_callback: (err: any, data: number[]) => void): void;
    readSync(): number[];
    readTimeout(_timeOut: number): number[];
    sendFeatureReport(_data: number[]): number;
    getFeatureReport(_reportIdd: number, _reportLength: number): number[];
    resume(): void;
    write(message: number[]): number;
    setNonBlocking(_noBlock: boolean): void;
}
export declare function devices(): Device[];
export declare function setDriverType(_type: 'hidraw' | 'libusb'): void;
//# sourceMappingURL=node-hid.d.ts.map