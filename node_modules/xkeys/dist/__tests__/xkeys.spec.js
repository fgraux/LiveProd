"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HIDMock = require("../__mocks__/node-hid");
const __1 = require("../");
const lib_1 = require("./lib");
describe('Unit tests', () => {
    test('calculateDelta', () => {
        expect(__1.XKeys.calculateDelta(100, 100)).toBe(0);
        expect(__1.XKeys.calculateDelta(110, 100)).toBe(10);
        expect(__1.XKeys.calculateDelta(90, 100)).toBe(-10);
        expect(__1.XKeys.calculateDelta(0, 255)).toBe(1);
        expect(__1.XKeys.calculateDelta(5, 250)).toBe(11);
        expect(__1.XKeys.calculateDelta(255, 0)).toBe(-1);
        expect(__1.XKeys.calculateDelta(250, 5)).toBe(-11);
    });
    test('XKeys methods', async () => {
        // const panel = new XKeys()
        const hidDevice = {
            vendorId: __1.XKeys.vendorId,
            productId: 1029,
            interface: 0,
            path: 'mockPath',
        };
        HIDMock.setMockWriteHandler(lib_1.handleXkeysMessages);
        const myXkeysPanel = await __1.setupXkeysPanel(hidDevice);
        const onError = jest.fn(console.log);
        myXkeysPanel.on('error', onError);
        lib_1.resetSentData();
        expect(myXkeysPanel.firmwareVersion).toBe(0);
        lib_1.resetSentData();
        expect(myXkeysPanel.unitId).toBe(0);
        lib_1.resetSentData();
        expect(myXkeysPanel.info).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.getButtons();
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setIndicatorLED(5, true);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setIndicatorLED(5, false);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setIndicatorLED(5, true, true);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklight(5, '59f');
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklight(5, '5599ff');
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklight(5, '#5599ff');
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklight(5, { r: 45, g: 210, b: 255 });
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklight(5, true);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklight(5, false);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklight(5, null);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklight(5, null);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklight(5, '59f', true);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setAllBacklights('59f');
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setAllBacklights('5599ff');
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setAllBacklights('#5599ff');
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setAllBacklights({ r: 45, g: 210, b: 255 });
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setAllBacklights(true);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setAllBacklights(false);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setAllBacklights(null);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setAllBacklights(null);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.toggleAllBacklights();
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklightIntensity(100);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setBacklightIntensity(0, 255);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.saveBackLights();
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setFrequency(127);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.setUnitId(42);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        myXkeysPanel.rebootDevice();
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        // expect(myXkeysPanel.writeLcdDisplay(line: number, displayChar: string, backlight: boolean)
        // expect(getSentData()).toMatchSnapshot()
        // resetSentData()
        myXkeysPanel.writeData([0, 1, 2, 3, 4]);
        expect(lib_1.getSentData()).toMatchSnapshot();
        lib_1.resetSentData();
        expect(onError).toHaveBeenCalledTimes(0);
    });
});
//# sourceMappingURL=xkeys.spec.js.map