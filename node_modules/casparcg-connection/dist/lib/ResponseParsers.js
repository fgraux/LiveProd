"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Path = require("path");
const AMCPConnectionOptions_1 = require("./AMCPConnectionOptions");
// Options NS
var CasparCGVersion = AMCPConnectionOptions_1.Options.CasparCGVersion;
// config NS
const Config_1 = require("./Config");
var CasparCGConfig = Config_1.Config.Intermediate.CasparCGConfig;
var Response;
(function (Response) {
    /***/
    class CasparCGPaths {
        /***/
        static ensureTrailingSlash(path) {
            return ((path.slice(-1) === '/' || path.slice(-1) === '\\') ? path : path + '/');
        }
        /***/
        get thumbnails() {
            return this.thumbnail;
        }
        /***/
        get absoluteMedia() {
            return this.absolutePath(this.media);
        }
        /***/
        get absoluteData() {
            return this.absolutePath(this.data);
        }
        /***/
        get absoluteLog() {
            return this.absolutePath(this.log);
        }
        /***/
        get absoluteTemplate() {
            return this.absolutePath(this.template);
        }
        /***/
        get absoluteThumbnail() {
            return this.absolutePath(this.thumbnail);
        }
        /***/
        get absoluteThumbnails() {
            return this.absolutePath(this.thumbnails);
        }
        /***/
        get absoluteFont() {
            return this.font ? this.absolutePath(this.font) : undefined;
        }
        /***/
        absolutePath(relativeOrAbsolutePath) {
            if (relativeOrAbsolutePath.match(/\:\\|\:\//)) {
                return CasparCGPaths.ensureTrailingSlash(relativeOrAbsolutePath);
            }
            return CasparCGPaths.ensureTrailingSlash(Path.join(this.root, relativeOrAbsolutePath));
        }
    }
    Response.CasparCGPaths = CasparCGPaths;
    /***/
    class ChannelRate {
        /***/
        constructor(rateExpression) {
            this.isInterlaced = rateExpression.indexOf('i') > -1;
            let rateMatch = rateExpression.match(/[0-9]+$/);
            let rate = 0;
            if (rateMatch) {
                rate = +rateMatch[0];
            }
            if (rate === 5994) {
                this.channelRate = 60 * 1000 / 1001;
                this.frameRate = this.isInterlaced ? 30 * 1000 / 1001 : this.channelRate;
            }
            else if (rateExpression.toLowerCase() === 'pal') {
                this.isInterlaced = true;
                this.channelRate = 50;
                this.frameRate = 25;
            }
            else if (rateExpression.toLowerCase() === 'ntsc') {
                this.isInterlaced = true;
                this.channelRate = 60 * 1000 / 1001;
                this.frameRate = 30 * 1000 / 1001;
            }
            else {
                this.channelRate = rate / 100;
                this.frameRate = this.isInterlaced ? rate / 200 : this.channelRate;
            }
        }
    }
    Response.ChannelRate = ChannelRate;
    /**
     *
     */
    class AbstractParser {
    }
    Response.AbstractParser = AbstractParser;
    /**
     *
     */
    class ChannelParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            data = [].concat(data);
            let result = [];
            data.forEach((channel) => {
                let components = channel.toString().split(/\s|,/);
                let i = +components.shift();
                let format = components.shift() || '';
                let rates = new ChannelRate(format);
                result.push({ channel: i, format: format.toLowerCase(), channelRate: rates.channelRate, frameRate: rates.frameRate, interlaced: rates.isInterlaced });
            });
            if (result.length > 0) {
                return result;
            }
            return {};
        }
    }
    Response.ChannelParser = ChannelParser;
    /***/
    class ConfigParser extends AbstractParser {
        /***/
        parse(data) {
            let serverVersion;
            if (this.context && this.context.hasOwnProperty('serverVersion') && this.context.serverVersion > CasparCGVersion.V21x) {
                serverVersion = CasparCGVersion.V210;
            }
            else {
                serverVersion = CasparCGVersion.V207;
            }
            let configResult = new CasparCGConfig(serverVersion);
            configResult.import(data);
            return configResult;
        }
    }
    Response.ConfigParser = ConfigParser;
    /**
     *
     */
    class DataParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.DataParser = DataParser;
    /**
     *
     */
    class DataListParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.DataListParser = DataListParser;
    /**
     *
     */
    class InfoTemplateParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.InfoTemplateParser = InfoTemplateParser;
    /**
     *
     */
    class HelpParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.HelpParser = HelpParser;
    /**
     *
     */
    class GLParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.GLParser = GLParser;
    /**
     *
     */
    class InfoDelayParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.InfoDelayParser = InfoDelayParser;
    /**
     *
     */
    class InfoParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.InfoParser = InfoParser;
    /**
     *
     */
    class InfoThreadsParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.InfoThreadsParser = InfoThreadsParser;
    /**
     *
     */
    class ThumbnailParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return `data:image/png;base64,${data}`;
        }
    }
    Response.ThumbnailParser = ThumbnailParser;
    /**
     *
     */
    class VersionParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.VersionParser = VersionParser;
    /**
     *
     */
    class ContentParser extends AbstractParser {
        static parseTimeString(timeDateString) {
            timeDateString = timeDateString.replace(/[tT]/g, '');
            let year = parseInt(timeDateString.slice(0, 4), 10);
            let month = parseInt(timeDateString.slice(4, 6), 10);
            let date = parseInt(timeDateString.slice(6, 8), 10);
            let hours = parseInt(timeDateString.slice(8, 10), 10);
            let minutes = parseInt(timeDateString.slice(10, 12), 10);
            let seconds = parseInt(timeDateString.slice(12, 14), 10);
            return new Date(year, month, date, hours, minutes, seconds).getTime();
        }
        /**
         *
         */
        parse(data) {
            return data.map((i) => {
                let components = i.match(/\"([\s\S]*)\" +([\s\S]*)/);
                if (components === null) {
                    // propably 2.2.0
                    return {
                        name: i,
                        type: 'template'
                    };
                }
                let name = components[1].replace(/\\/g, '/');
                let typeData = components[2].split(/\s+/);
                // is font
                if (typeData.length === 1) {
                    return {
                        name: name,
                        type: 'font',
                        fileName: typeData[0].replace(/\"/g, '')
                    };
                }
                // is 2.1.0 template
                if (typeData.length === 3) {
                    return {
                        name: name,
                        type: 'template',
                        size: parseInt(typeData[0], 10),
                        changed: ContentParser.parseTimeString(typeData[1]),
                        format: typeData[2]
                    };
                }
                // is 2.0.7 template
                if (typeData.length === 2) {
                    return {
                        name: name,
                        type: 'template',
                        size: parseInt(typeData[0], 10),
                        changed: ContentParser.parseTimeString(typeData[1])
                    };
                }
                // is media
                let frames = parseInt(typeData[3], 10);
                let frameRate = 0;
                let duration = 0;
                let frameTimeSegments = typeData[4].split('/');
                if (frameTimeSegments[0] !== '0') {
                    frameRate = +(parseInt(frameTimeSegments[1], 10) / parseInt(frameTimeSegments[0], 10)).toFixed(2);
                    duration = Math.round((frames / frameRate) * 100) / 100;
                }
                return {
                    name: name,
                    type: typeData[0].toLowerCase() === 'movie' ? 'video' : typeData[0].toLowerCase() === 'still' ? 'image' : typeData[0].toLowerCase(),
                    size: parseInt(typeData[1], 10),
                    changed: ContentParser.parseTimeString(typeData[2]),
                    frames: frames,
                    frameTime: typeData[4],
                    frameRate: frameRate,
                    duration: duration
                };
            });
        }
    }
    Response.ContentParser = ContentParser;
    /**
     *
     */
    class ThumbnailListParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data.map((i) => {
                let components = i.match(/\"([\s\S]*)\" +([\s\S]*)/);
                if (components === null) {
                    return null;
                }
                let name = components[1].replace(/\\/g, '/');
                let typeData = components[2].split(/\s+/);
                return {
                    name: name,
                    type: 'thumbnail',
                    changed: ContentParser.parseTimeString(typeData[0]),
                    size: parseInt(typeData[1], 10)
                };
            });
        }
    }
    Response.ThumbnailListParser = ThumbnailListParser;
    /**
     *
     */
    class CinfParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            if (data && Array.isArray(data)) {
                let components = data[0].match(/\"([\s\S]*)\" +([\s\S]*)/);
                if (components === null) {
                    return {};
                }
                // let name: string = components[1].replace(/\\/g, "/");
                let typeData = components[2].split(/\s+/);
                return { size: parseInt(typeData[1], 10), changed: typeData[2], duration: parseInt(typeData[3], 10), fps: typeData[4] };
            }
            return {};
        }
    }
    Response.CinfParser = CinfParser;
    /**
     *
     */
    class InfoQueuesParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.InfoQueuesParser = InfoQueuesParser;
    /**
     *
     */
    class InfoServerParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return data;
        }
    }
    Response.InfoServerParser = InfoServerParser;
    /**
     *
     */
    class InfoPathsParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            let paths = new CasparCGPaths();
            if (data.hasOwnProperty('initial-path')) {
                paths.root = data['initial-path'];
            }
            if (data.hasOwnProperty('media-path')) {
                paths.media = data['media-path'];
            }
            if (data.hasOwnProperty('data-path')) {
                paths.data = data['data-path'];
            }
            if (data.hasOwnProperty('log-path')) {
                paths.log = data['log-path'];
            }
            if (data.hasOwnProperty('template-path')) {
                paths.template = data['template-path'];
            }
            if (data.hasOwnProperty('thumbnails-path')) {
                paths.thumbnail = data['thumbnails-path'];
            }
            if (data.hasOwnProperty('thumbnail-path')) {
                paths.thumbnail = data['thumbnail-path'];
            }
            if (data.hasOwnProperty('font-path')) {
                paths.font = data['font-path'];
            }
            return paths;
        }
    }
    Response.InfoPathsParser = InfoPathsParser;
    /**
     *
     */
    class InfoSystemParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            // wrap devices in arrays (if single device of a type)
            if (data.hasOwnProperty('decklink') && data.decklink.hasOwnProperty('device')) {
                if (!Array.isArray(data.decklink.device)) {
                    data.decklink.device = [data.decklink.device];
                }
            }
            if (data.hasOwnProperty('bluefish') && data.bluefish.hasOwnProperty('device')) {
                if (!Array.isArray(data.bluefish.device)) {
                    data.bluefish.device = [data.bluefish.device];
                }
            }
            return data;
        }
    }
    Response.InfoSystemParser = InfoSystemParser;
    /**
     *
     */
    class MixerStatusKeyerParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                keyer: !!data[0]
            };
        }
    }
    Response.MixerStatusKeyerParser = MixerStatusKeyerParser;
    /**
     *
     */
    class MixerStatusChromaParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                chroma: {
                    enable: !!data[0],
                    targetHue: data[1],
                    hueWidth: data[2],
                    minSaturation: data[3],
                    minBrightness: data[4],
                    softness: data[5],
                    spillSuppress: data[6],
                    spillSuppressSaturation: data[7],
                    showMask: !!data[8]
                }
            };
        }
    }
    Response.MixerStatusChromaParser = MixerStatusChromaParser;
    /**
     *
     */
    class MixerStatusBlendParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                blend: data
            };
        }
    }
    Response.MixerStatusBlendParser = MixerStatusBlendParser;
    /**
     *
     */
    class MixerStatusOpacityParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                opacity: data[0]
            };
        }
    }
    Response.MixerStatusOpacityParser = MixerStatusOpacityParser;
    /**
     *
     */
    class MixerStatusBrightnessParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                brightness: data[0]
            };
        }
    }
    Response.MixerStatusBrightnessParser = MixerStatusBrightnessParser;
    /**
     *
     */
    class MixerStatusSaturationParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                saturation: data[0]
            };
        }
    }
    Response.MixerStatusSaturationParser = MixerStatusSaturationParser;
    /**
     *
     */
    class MixerStatusContrastParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                contrast: data[0]
            };
        }
    }
    Response.MixerStatusContrastParser = MixerStatusContrastParser;
    /**
     *
     */
    class MixerStatusLevelsParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                levels: {
                    minInput: data[0],
                    maxInput: data[1],
                    gamma: data[2],
                    minOutput: data[3],
                    maxOutput: data[4]
                }
            };
        }
    }
    Response.MixerStatusLevelsParser = MixerStatusLevelsParser;
    /**
     *
     */
    class MixerStatusFillParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                fill: {
                    x: data[0],
                    y: data[1],
                    xScale: data[2],
                    yScale: data[3]
                }
            };
        }
    }
    Response.MixerStatusFillParser = MixerStatusFillParser;
    /**
     *
     */
    class MixerStatusClipParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                clip: {
                    x: data[0],
                    y: data[1],
                    width: data[2],
                    height: data[3]
                }
            };
        }
    }
    Response.MixerStatusClipParser = MixerStatusClipParser;
    /**
     *
     */
    class MixerStatusAnchorParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                anchor: {
                    x: data[0],
                    y: data[1]
                }
            };
        }
    }
    Response.MixerStatusAnchorParser = MixerStatusAnchorParser;
    /**
     *
     */
    class MixerStatusCropParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                crop: {
                    left: data[0],
                    top: data[1],
                    right: data[2],
                    bottom: data[3]
                }
            };
        }
    }
    Response.MixerStatusCropParser = MixerStatusCropParser;
    /**
     *
     */
    class MixerStatusRotationParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                rotation: data[0]
            };
        }
    }
    Response.MixerStatusRotationParser = MixerStatusRotationParser;
    /**
     *
     */
    class MixerStatusPerspectiveParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                perspective: {
                    topLeftX: data[0],
                    topLeftY: data[1],
                    topRightX: data[2],
                    topRightY: data[3],
                    bottomRightX: data[6],
                    bottomRightY: data[7],
                    bottomLeftX: data[4],
                    bottomLeftY: data[5]
                }
            };
        }
    }
    Response.MixerStatusPerspectiveParser = MixerStatusPerspectiveParser;
    /**
     *
     */
    class MixerStatusMipmapParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                mipmap: !!data[0]
            };
        }
    }
    Response.MixerStatusMipmapParser = MixerStatusMipmapParser;
    /**
     *
     */
    class MixerStatusVolumeParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                volume: data[0]
            };
        }
    }
    Response.MixerStatusVolumeParser = MixerStatusVolumeParser;
    /**
     *
     */
    class MixerStatusMastervolumeParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                mastervolume: data[0]
            };
        }
    }
    Response.MixerStatusMastervolumeParser = MixerStatusMastervolumeParser;
    /**
     *
     */
    class MixerStatusStraightAlphaOutputParser extends AbstractParser {
        /**
         *
         */
        parse(data) {
            return {
                straightAlphaOutput: !!data[0]
            };
        }
    }
    Response.MixerStatusStraightAlphaOutputParser = MixerStatusStraightAlphaOutputParser;
})(Response = exports.Response || (exports.Response = {}));
//# sourceMappingURL=ResponseParsers.js.map