"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ServerStateEnum_1 = require("./ServerStateEnum");
// ResponseNS
const ResponseSignature_1 = require("./ResponseSignature");
const ResponseValidators_1 = require("./ResponseValidators");
const ResponseParsers_1 = require("./ResponseParsers");
var ResponseSignature = ResponseSignature_1.Response.ResponseSignature;
// Command NS
const AbstractCommand_1 = require("./AbstractCommand");
var AbstractCommand = AbstractCommand_1.Command.AbstractCommand;
var AbstractOrChannelOrLayerCommand = AbstractCommand_1.Command.AbstractOrChannelOrLayerCommand;
var AbstractChannelCommand = AbstractCommand_1.Command.AbstractChannelCommand;
var AbstractChannelOrLayerCommand = AbstractCommand_1.Command.AbstractChannelOrLayerCommand;
var AbstractLayerWithFallbackCommand = AbstractCommand_1.Command.AbstractLayerWithFallbackCommand;
var AbstractLayerWithCgFallbackCommand = AbstractCommand_1.Command.AbstractLayerWithCgFallbackCommand;
// Param NS
const ParamSignature_1 = require("./ParamSignature");
var required = ParamSignature_1.Param.Required;
var optional = ParamSignature_1.Param.Optional;
var ParamSignature = ParamSignature_1.Param.ParamSignature;
// Validation NS
const ParamValidators_1 = require("./ParamValidators");
// Protocol NS
const ProtocolLogic_1 = require("./ProtocolLogic");
var Depends = ProtocolLogic_1.Protocol.Depends;
var Coupled = ProtocolLogic_1.Protocol.Coupled;
var OneOf = ProtocolLogic_1.Protocol.OneOf;
/**
 * Internal
 */
var AMCP;
(function (AMCP) {
    class CustomCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'command', null, new ParamValidators_1.Validation.StringValidator(false))
            ];
        }
    }
    CustomCommand.commandString = '';
    AMCP.CustomCommand = CustomCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * IVideo
 */
(function (AMCP) {
    /**
     *
     */
    class LoadbgCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'clip', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'loop', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('LOOP')),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'in', 'IN', new ParamValidators_1.Validation.FrameValidator('IN')),
                new ParamSignature(optional, 'seek', 'SEEK', new ParamValidators_1.Validation.FrameValidator('SEEK')),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH')),
                new ParamSignature(optional, 'filter', 'FILTER', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'afilter', 'AF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'vfilter', 'VF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'auto', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('AUTO')),
                new ParamSignature(optional, 'channelLayout', 'CHANNEL_LAYOUT', new ParamValidators_1.Validation.ChannelLayoutValidator()),
                new ParamSignature(optional, 'clearOn404', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('CLEAR_ON_404'))
            ];
        }
    }
    LoadbgCommand.commandString = 'LOADBG';
    LoadbgCommand.protocolLogic = [
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.LoadbgCommand = LoadbgCommand;
    /**
     *
     */
    class LoadCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'clip', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'loop', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('LOOP')),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'in', 'IN', new ParamValidators_1.Validation.FrameValidator('IN')),
                new ParamSignature(optional, 'seek', 'SEEK', new ParamValidators_1.Validation.FrameValidator('SEEK')),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH')),
                new ParamSignature(optional, 'filter', 'FILTER', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'afilter', 'AF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'vfilter', 'VF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'channelLayout', 'CHANNEL_LAYOUT', new ParamValidators_1.Validation.ChannelLayoutValidator()),
                new ParamSignature(optional, 'clearOn404', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('CLEAR_ON_404'))
            ];
        }
    }
    LoadCommand.commandString = 'LOAD';
    LoadCommand.protocolLogic = [
        new Depends('loop', 'clip'),
        new Depends('in', 'clip'),
        new Depends('seek', 'clip'),
        new Depends('length', 'clip'),
        new Depends('filter', 'clip'),
        new Depends('transition', 'clip'),
        new Depends('channelLayout', 'clip'),
        new Depends('clearOn404', 'clip'),
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.LoadCommand = LoadCommand;
    /**
     *
     */
    class PlayCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'clip', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'loop', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('LOOP')),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'in', 'IN', new ParamValidators_1.Validation.FrameValidator('IN')),
                new ParamSignature(optional, 'seek', 'SEEK', new ParamValidators_1.Validation.FrameValidator('SEEK')),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH')),
                new ParamSignature(optional, 'filter', 'FILTER', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'afilter', 'AF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'vfilter', 'VF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'channelLayout', 'CHANNEL_LAYOUT', new ParamValidators_1.Validation.ChannelLayoutValidator()),
                new ParamSignature(optional, 'clearOn404', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('CLEAR_ON_404'))
            ];
        }
    }
    PlayCommand.commandString = 'PLAY';
    PlayCommand.protocolLogic = [
        new Depends('loop', 'clip'),
        new Depends('in', 'clip'),
        new Depends('seek', 'clip'),
        new Depends('length', 'clip'),
        new Depends('filter', 'clip'),
        new Depends('transition', 'clip'),
        new Depends('channelLayout', 'clip'),
        new Depends('clearOn404', 'clip'),
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.PlayCommand = PlayCommand;
    /**
     *
     */
    class PauseCommand extends AbstractLayerWithFallbackCommand {
    }
    PauseCommand.commandString = 'PAUSE';
    AMCP.PauseCommand = PauseCommand;
    /**
     *
     */
    class ResumeCommand extends AbstractLayerWithFallbackCommand {
    }
    ResumeCommand.commandString = 'RESUME';
    AMCP.ResumeCommand = ResumeCommand;
    /**
     *
     */
    class StopCommand extends AbstractLayerWithFallbackCommand {
    }
    StopCommand.commandString = 'STOP';
    AMCP.StopCommand = StopCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * IInputOutput
 */
(function (AMCP) {
    /**
     *
     */
    class LoadDecklinkBgCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'device', 'DECKLINK DEVICE', new ParamValidators_1.Validation.DecklinkDeviceValidator()),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH')),
                new ParamSignature(optional, 'filter', 'FILTER', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'afilter', 'AF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'vfilter', 'VF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'format', 'FORMAT', new ParamValidators_1.Validation.ChannelFormatValidator()),
                new ParamSignature(optional, 'channelLayout', 'CHANNEL_LAYOUT', new ParamValidators_1.Validation.ChannelLayoutValidator()),
                new ParamSignature(optional, 'auto', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('AUTO'))
            ];
        }
    }
    LoadDecklinkBgCommand.commandString = 'LOADBG';
    LoadDecklinkBgCommand.protocolLogic = [
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.LoadDecklinkBgCommand = LoadDecklinkBgCommand;
    /**
     *
     */
    class LoadDecklinkCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'device', 'DECKLINK DEVICE', new ParamValidators_1.Validation.DecklinkDeviceValidator()),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH')),
                new ParamSignature(optional, 'filter', 'FILTER', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'afilter', 'AF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'vfilter', 'VF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'format', 'FORMAT', new ParamValidators_1.Validation.ChannelFormatValidator()),
                new ParamSignature(optional, 'channelLayout', 'CHANNEL_LAYOUT', new ParamValidators_1.Validation.ChannelLayoutValidator())
            ];
        }
    }
    LoadDecklinkCommand.commandString = 'LOAD';
    LoadDecklinkCommand.protocolLogic = [
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.LoadDecklinkCommand = LoadDecklinkCommand;
    /**
     *
     */
    class PlayDecklinkCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'device', 'DECKLINK DEVICE', new ParamValidators_1.Validation.DecklinkDeviceValidator()),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH')),
                new ParamSignature(optional, 'filter', 'FILTER', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'afilter', 'AF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'vfilter', 'VF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'format', 'FORMAT', new ParamValidators_1.Validation.ChannelFormatValidator()),
                new ParamSignature(optional, 'channelLayout', 'CHANNEL_LAYOUT', new ParamValidators_1.Validation.ChannelLayoutValidator())
            ];
        }
    }
    PlayDecklinkCommand.commandString = 'PLAY';
    PlayDecklinkCommand.protocolLogic = [
        new Depends('length', 'device'),
        new Depends('filter', 'device'),
        new Depends('format', 'device'),
        new Depends('channelLayout', 'device'),
        new Depends('transition', 'device'),
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.PlayDecklinkCommand = PlayDecklinkCommand;
    /**
     *
     */
    class LoadRouteBgCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'route', null, new ParamValidators_1.Validation.RouteValidator()),
                new ParamSignature(optional, 'mode', null, new ParamValidators_1.Validation.RouteModeValidator()),
                new ParamSignature(optional, 'framesDelay', 'FRAMES_DELAY', new ParamValidators_1.Validation.RouteFramesDelayValidator()),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH')),
                new ParamSignature(optional, 'filter', 'FILTER', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'afilter', 'AF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'vfilter', 'VF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'auto', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('AUTO')),
                new ParamSignature(optional, 'channelLayout', 'CHANNEL_LAYOUT', new ParamValidators_1.Validation.ChannelLayoutValidator())
            ];
        }
    }
    LoadRouteBgCommand.commandString = 'LOADBG';
    LoadRouteBgCommand.protocolLogic = [
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.LoadRouteBgCommand = LoadRouteBgCommand;
    /**
     *
     */
    class LoadRouteCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'route', null, new ParamValidators_1.Validation.RouteValidator()),
                new ParamSignature(optional, 'mode', null, new ParamValidators_1.Validation.RouteModeValidator()),
                new ParamSignature(optional, 'framesDelay', 'FRAMES_DELAY', new ParamValidators_1.Validation.RouteFramesDelayValidator()),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH')),
                new ParamSignature(optional, 'filter', 'FILTER', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'afilter', 'AF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'vfilter', 'VF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'channelLayout', 'CHANNEL_LAYOUT', new ParamValidators_1.Validation.ChannelLayoutValidator())
            ];
        }
    }
    LoadRouteCommand.commandString = 'LOAD';
    LoadRouteCommand.protocolLogic = [
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.LoadRouteCommand = LoadRouteCommand;
    /**
     *
     */
    class PlayRouteCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'route', null, new ParamValidators_1.Validation.RouteValidator()),
                new ParamSignature(optional, 'mode', null, new ParamValidators_1.Validation.RouteModeValidator()),
                new ParamSignature(optional, 'framesDelay', 'FRAMES_DELAY', new ParamValidators_1.Validation.RouteFramesDelayValidator()),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH')),
                new ParamSignature(optional, 'filter', 'FILTER', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'afilter', 'AF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'vfilter', 'VF', new ParamValidators_1.Validation.FilterValidator()),
                new ParamSignature(optional, 'channelLayout', 'CHANNEL_LAYOUT', new ParamValidators_1.Validation.ChannelLayoutValidator())
            ];
        }
    }
    PlayRouteCommand.commandString = 'PLAY';
    PlayRouteCommand.protocolLogic = [
        new Depends('length', 'route'),
        new Depends('filter', 'route'),
        new Depends('format', 'route'),
        new Depends('channelLayout', 'route'),
        new Depends('transition', 'route'),
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.PlayRouteCommand = PlayRouteCommand;
    /**
     *
     */
    class LoadHtmlPageBgCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'url', '[HTML]', new ParamValidators_1.Validation.URLValidator()),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator()),
                new ParamSignature(optional, 'auto', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('AUTO'))
            ];
        }
    }
    LoadHtmlPageBgCommand.commandString = 'LOADBG';
    LoadHtmlPageBgCommand.protocolLogic = [
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.LoadHtmlPageBgCommand = LoadHtmlPageBgCommand;
    /**
     *
     */
    class LoadHtmlPageCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'url', '[HTML]', new ParamValidators_1.Validation.URLValidator()),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator())
            ];
        }
    }
    LoadHtmlPageCommand.commandString = 'LOAD';
    LoadHtmlPageCommand.protocolLogic = [
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.LoadHtmlPageCommand = LoadHtmlPageCommand;
    /**
     *
     */
    class PlayHtmlPageCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'url', '[HTML]', new ParamValidators_1.Validation.URLValidator()),
                new ParamSignature(optional, 'transition', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Transition)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'transitionDirection', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Direction)),
                new ParamSignature(optional, 'stingTransitionProperties', null, new ParamValidators_1.Validation.StingTransitionPropertiesValidator()),
                new ParamSignature(optional, 'stingMaskFilename', null, new ParamValidators_1.Validation.ClipNameValidator()),
                new ParamSignature(optional, 'stingDelay', null, new ParamValidators_1.Validation.PositiveNumberValidator()),
                new ParamSignature(optional, 'stingOverlayFilename', null, new ParamValidators_1.Validation.ClipNameEmptyStringValidator())
            ];
        }
    }
    PlayHtmlPageCommand.commandString = 'PLAY';
    PlayHtmlPageCommand.protocolLogic = [
        new Depends('transition', 'url'),
        new Depends('transitionDuration', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionEasing', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('transitionDirection', 'transition').mustNotBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingTransitionProperties', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingMaskFilename', 'transition').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingDelay', 'stingMaskFilename').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING),
        new Depends('stingOverlayFilename', 'stingDelay').mustBe('transition', ServerStateEnum_1.Enum.Transition.STING)
    ];
    AMCP.PlayHtmlPageCommand = PlayHtmlPageCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * ICG
 */
(function (AMCP) {
    /**
     *
     */
    class CGAddCommand extends AbstractLayerWithCgFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'flashLayer', 'ADD', new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(required, 'templateName', null, new ParamValidators_1.Validation.TemplateNameValidator()),
                new ParamSignature(required, 'playOnLoad', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults(1, 0)),
                new ParamSignature(optional, 'data', null, new ParamValidators_1.Validation.TemplateDataValidator())
            ];
        }
    }
    CGAddCommand.commandString = 'CG';
    AMCP.CGAddCommand = CGAddCommand;
    /**
     *
     */
    class CGPlayCommand extends AbstractLayerWithCgFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'flashLayer', 'PLAY', new ParamValidators_1.Validation.PositiveNumberValidatorBetween())
            ];
        }
    }
    CGPlayCommand.commandString = 'CG';
    AMCP.CGPlayCommand = CGPlayCommand;
    /**
     *
     */
    class CGStopCommand extends AbstractLayerWithCgFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'flashLayer', 'STOP', new ParamValidators_1.Validation.PositiveNumberValidatorBetween())
            ];
        }
    }
    CGStopCommand.commandString = 'CG';
    AMCP.CGStopCommand = CGStopCommand;
    /**
     *
     */
    class CGNextCommand extends AbstractLayerWithCgFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'flashLayer', 'NEXT', new ParamValidators_1.Validation.PositiveNumberValidatorBetween())
            ];
        }
    }
    CGNextCommand.commandString = 'CG';
    AMCP.CGNextCommand = CGNextCommand;
    /**
     *
     */
    class CGRemoveCommand extends AbstractLayerWithCgFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'flashLayer', 'REMOVE', new ParamValidators_1.Validation.PositiveNumberValidatorBetween())
            ];
        }
    }
    CGRemoveCommand.commandString = 'CG';
    AMCP.CGRemoveCommand = CGRemoveCommand;
    /**
     *
     */
    class CGClearCommand extends AbstractLayerWithCgFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CLEAR'))
            ];
            this._objectParams['keyword'] = 'CLEAR';
        }
    }
    CGClearCommand.commandString = 'CG';
    AMCP.CGClearCommand = CGClearCommand;
    /**
     *
     */
    class CGUpdateCommand extends AbstractLayerWithCgFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'flashLayer', 'UPDATE', new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(required, 'data', null, new ParamValidators_1.Validation.TemplateDataValidator())
            ];
        }
    }
    CGUpdateCommand.commandString = 'CG';
    AMCP.CGUpdateCommand = CGUpdateCommand;
    /**
     * @todo: 201 response code, parsing???????
     */
    class CGInvokeCommand extends AbstractLayerWithCgFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'flashLayer', 'INVOKE', new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(required, 'method', null, new ParamValidators_1.Validation.StringValidator())
            ];
            this.responseProtocol = new ResponseSignature(201);
        }
    }
    CGInvokeCommand.commandString = 'CG';
    AMCP.CGInvokeCommand = CGInvokeCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * IMixer
 * @todo: switch 201/202 based on mode
 */
(function (AMCP) {
    /**
     *
     */
    class MixerKeyerCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('KEYER')),
                new ParamSignature(optional, 'keyer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults(1, 0)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'KEYER';
        }
    }
    MixerKeyerCommand.commandString = 'MIXER';
    MixerKeyerCommand.protocolLogic = [
        new Depends('defer', 'keyer')
    ];
    AMCP.MixerKeyerCommand = MixerKeyerCommand;
    /**
     *
     */
    class MixerStatusKeyerCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('KEYER'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusKeyerParser);
            this._objectParams['keyword'] = 'KEYER';
        }
    }
    MixerStatusKeyerCommand.commandString = 'MIXER';
    MixerStatusKeyerCommand.protocolLogic = [];
    AMCP.MixerStatusKeyerCommand = MixerStatusKeyerCommand;
    /**
     * @todo	Validata/clamp lamp number range?
     */
    class MixerChromaCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CHROMA')),
                new ParamSignature(optional, 'keyer', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Chroma)),
                new ParamSignature(optional, 'threshold', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'softness', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'spill', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'CHROMA';
        }
    }
    MixerChromaCommand.commandString = 'MIXER';
    MixerChromaCommand.protocolLogic = [
        new Coupled('threshold', 'softness'),
        new Depends('keyer', 'threshold').ifNot('keyer', ServerStateEnum_1.Enum.Chroma.NONE),
        new Depends('spill', 'threshold'),
        new Depends('transitionDuration', 'keyer'),
        new Depends('transitionEasing', 'keyer'),
        new Depends('defer', 'threshold').ifNot('keyer', ServerStateEnum_1.Enum.Chroma.NONE)
    ];
    AMCP.MixerChromaCommand = MixerChromaCommand;
    class MixerStatusChromaCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CHROMA'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusChromaParser);
            this._objectParams['keyword'] = 'CHROMA';
        }
    }
    MixerStatusChromaCommand.commandString = 'MIXER';
    MixerStatusChromaCommand.protocolLogic = [];
    AMCP.MixerStatusChromaCommand = MixerStatusChromaCommand;
    /**
     *
     */
    class MixerBlendCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('BLEND')),
                new ParamSignature(optional, 'blendmode', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.BlendMode)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'BLEND';
        }
    }
    MixerBlendCommand.commandString = 'MIXER';
    MixerBlendCommand.protocolLogic = [
        new Depends('defer', 'blendmode')
    ];
    AMCP.MixerBlendCommand = MixerBlendCommand;
    /**
     *
     */
    class MixerStatusBlendCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('BLEND'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.StringValidator, ResponseParsers_1.Response.MixerStatusBlendParser);
            this._objectParams['keyword'] = 'BLEND';
        }
    }
    MixerStatusBlendCommand.commandString = 'MIXER';
    MixerStatusBlendCommand.protocolLogic = [];
    AMCP.MixerStatusBlendCommand = MixerStatusBlendCommand;
    /**
     *
     */
    class MixerOpacityCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('OPACITY')),
                new ParamSignature(optional, 'opacity', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'OPACITY';
        }
    }
    MixerOpacityCommand.commandString = 'MIXER';
    MixerOpacityCommand.protocolLogic = [
        new Depends('transitionDuration', 'opacity'),
        new Depends('transitionEasing', 'opacity'),
        new Depends('defer', 'opacity')
    ];
    AMCP.MixerOpacityCommand = MixerOpacityCommand;
    /**
     *
     */
    class MixerStatusOpacityCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('OPACITY'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusOpacityParser);
            this._objectParams['keyword'] = 'OPACITY';
        }
    }
    MixerStatusOpacityCommand.commandString = 'MIXER';
    MixerStatusOpacityCommand.protocolLogic = [];
    AMCP.MixerStatusOpacityCommand = MixerStatusOpacityCommand;
    /**
     *
     */
    class MixerBrightnessCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('BRIGHTNESS')),
                new ParamSignature(optional, 'brightness', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'BRIGHTNESS';
        }
    }
    MixerBrightnessCommand.commandString = 'MIXER';
    MixerBrightnessCommand.protocolLogic = [
        new Depends('transitionDuration', 'brightness'),
        new Depends('transitionEasing', 'brightness'),
        new Depends('defer', 'brightness')
    ];
    AMCP.MixerBrightnessCommand = MixerBrightnessCommand;
    /**
     *
     */
    class MixerStatusBrightnessCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('BRIGHTNESS'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusBrightnessParser);
            this._objectParams['keyword'] = 'BRIGHTNESS';
        }
    }
    MixerStatusBrightnessCommand.commandString = 'MIXER';
    MixerStatusBrightnessCommand.protocolLogic = [];
    AMCP.MixerStatusBrightnessCommand = MixerStatusBrightnessCommand;
    /**
     *
     */
    class MixerSaturationCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('SATURATION')),
                new ParamSignature(optional, 'saturation', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'SATURATION';
        }
    }
    MixerSaturationCommand.commandString = 'MIXER';
    MixerSaturationCommand.protocolLogic = [
        new Depends('transitionDuration', 'saturation'),
        new Depends('transitionEasing', 'saturation'),
        new Depends('defer', 'saturation')
    ];
    AMCP.MixerSaturationCommand = MixerSaturationCommand;
    /**
     *
     */
    class MixerStatusSaturationCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('SATURATION'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusSaturationParser);
            this._objectParams['keyword'] = 'SATURATION';
        }
    }
    MixerStatusSaturationCommand.commandString = 'MIXER';
    MixerStatusSaturationCommand.protocolLogic = [];
    AMCP.MixerStatusSaturationCommand = MixerStatusSaturationCommand;
    /**
     *
     */
    class MixerContrastCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CONTRAST')),
                new ParamSignature(optional, 'contrast', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'CONTRAST';
        }
    }
    MixerContrastCommand.commandString = 'MIXER';
    MixerContrastCommand.protocolLogic = [
        new Depends('transitionDuration', 'contrast'),
        new Depends('transitionEasing', 'contrast'),
        new Depends('defer', 'contrast')
    ];
    AMCP.MixerContrastCommand = MixerContrastCommand;
    /**
     *
     */
    class MixerStatusContrastCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CONTRAST'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusContrastParser);
            this._objectParams['keyword'] = 'CONTRAST';
        }
    }
    MixerStatusContrastCommand.commandString = 'MIXER';
    MixerStatusContrastCommand.protocolLogic = [];
    AMCP.MixerStatusContrastCommand = MixerStatusContrastCommand;
    /**
     * @todo:	verify `gamma` value range
     */
    class MixerLevelsCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('LEVELS')),
                new ParamSignature(optional, 'minInput', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'maxInput', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'gamma', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'minOutput', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'maxOutput', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'LEVELS';
        }
    }
    MixerLevelsCommand.commandString = 'MIXER';
    MixerLevelsCommand.protocolLogic = [
        new Coupled('minInput', 'maxInput', 'gamma', 'minOutput', 'maxOutput'),
        new Depends('transitionDuration', 'minInput'),
        new Depends('transitionEasing', 'minInput'),
        new Depends('defer', 'minInput')
    ];
    AMCP.MixerLevelsCommand = MixerLevelsCommand;
    /**
     *
     */
    class MixerStatusLevelsCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('LEVELS'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusLevelsParser);
            this._objectParams['keyword'] = 'LEVELS';
        }
    }
    MixerStatusLevelsCommand.commandString = 'MIXER';
    MixerStatusLevelsCommand.protocolLogic = [];
    AMCP.MixerStatusLevelsCommand = MixerStatusLevelsCommand;
    /**
     *
     */
    class MixerFillCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('FILL')),
                new ParamSignature(optional, 'x', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'y', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'xScale', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'yScale', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'FILL';
        }
    }
    MixerFillCommand.commandString = 'MIXER';
    MixerFillCommand.protocolLogic = [
        new Coupled('x', 'y', 'xScale', 'yScale'),
        new Depends('transitionDuration', 'x'),
        new Depends('transitionEasing', 'x'),
        new Depends('defer', 'x')
    ];
    AMCP.MixerFillCommand = MixerFillCommand;
    /**
     *
     */
    class MixerStatusFillCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('FILL'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusFillParser);
            this._objectParams['keyword'] = 'FILL';
        }
    }
    MixerStatusFillCommand.commandString = 'MIXER';
    MixerStatusFillCommand.protocolLogic = [];
    AMCP.MixerStatusFillCommand = MixerStatusFillCommand;
    /**
     *
     */
    class MixerClipCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CLIP')),
                new ParamSignature(optional, 'x', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'y', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'width', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'height', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'CLIP';
        }
    }
    MixerClipCommand.commandString = 'MIXER';
    MixerClipCommand.protocolLogic = [
        new Coupled('x', 'y', 'width', 'height'),
        new Depends('transitionDuration', 'x'),
        new Depends('transitionEasing', 'x'),
        new Depends('defer', 'x')
    ];
    AMCP.MixerClipCommand = MixerClipCommand;
    /**
     *
     */
    class MixerStatusClipCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CLIP'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusClipParser);
            this._objectParams['keyword'] = 'CLIP';
        }
    }
    MixerStatusClipCommand.commandString = 'MIXER';
    MixerStatusClipCommand.protocolLogic = [];
    AMCP.MixerStatusClipCommand = MixerStatusClipCommand;
    /**
     *
     */
    class MixerAnchorCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('ANCHOR')),
                new ParamSignature(optional, 'x', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'y', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'ANCHOR';
        }
    }
    MixerAnchorCommand.commandString = 'MIXER';
    MixerAnchorCommand.protocolLogic = [
        new Coupled('x', 'y'),
        new Depends('transitionDuration', 'x'),
        new Depends('transitionEasing', 'x'),
        new Depends('defer', 'x')
    ];
    AMCP.MixerAnchorCommand = MixerAnchorCommand;
    /**
     *
     */
    class MixerStatusAnchorCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('ANCHOR'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusAnchorParser);
            this._objectParams['keyword'] = 'ANCHOR';
        }
    }
    MixerStatusAnchorCommand.commandString = 'MIXER';
    MixerStatusAnchorCommand.protocolLogic = [];
    AMCP.MixerStatusAnchorCommand = MixerStatusAnchorCommand;
    /**
     *
     */
    class MixerCropCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CROP')),
                new ParamSignature(optional, 'left', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'top', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'right', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'bottom', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'CROP';
        }
    }
    MixerCropCommand.commandString = 'MIXER';
    MixerCropCommand.protocolLogic = [
        new Coupled('left', 'top', 'right', 'bottom'),
        new Depends('transitionDuration', 'left'),
        new Depends('transitionEasing', 'left'),
        new Depends('defer', 'left')
    ];
    AMCP.MixerCropCommand = MixerCropCommand;
    /**
     *
     */
    class MixerStatusCropCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CROP'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusCropParser);
            this._objectParams['keyword'] = 'CROP';
        }
    }
    MixerStatusCropCommand.commandString = 'MIXER';
    MixerStatusCropCommand.protocolLogic = [];
    AMCP.MixerStatusCropCommand = MixerStatusCropCommand;
    /**
     *
     */
    class MixerRotationCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('ROTATION')),
                new ParamSignature(optional, 'rotation', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'ROTATION';
        }
    }
    MixerRotationCommand.commandString = 'MIXER';
    MixerRotationCommand.protocolLogic = [
        new Depends('transitionDuration', 'rotation'),
        new Depends('transitionEasing', 'rotation'),
        new Depends('defer', 'rotation')
    ];
    AMCP.MixerRotationCommand = MixerRotationCommand;
    /**
     *
     */
    class MixerStatusRotationCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('ROTATION'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusRotationParser);
            this._objectParams['keyword'] = 'ROTATION';
        }
    }
    MixerStatusRotationCommand.commandString = 'MIXER';
    MixerStatusRotationCommand.protocolLogic = [];
    AMCP.MixerStatusRotationCommand = MixerStatusRotationCommand;
    /**
     *
     */
    class MixerPerspectiveCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('PERSPECTIVE')),
                new ParamSignature(optional, 'topLeftX', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'topLeftY', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'topRightX', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'topRightY', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'bottomRightX', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'bottomRightY', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'bottomLeftX', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'bottomLeftY', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.NumberValidator()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'PERSPECTIVE';
        }
    }
    MixerPerspectiveCommand.commandString = 'MIXER';
    MixerPerspectiveCommand.protocolLogic = [
        new Coupled('topLeftX', 'topLeftY', 'topRightX', 'topRightY', 'bottomRightX', 'bottomRightY', 'bottomLeftX', 'bottomLeftY'),
        new Depends('transitionDuration', 'topLeftX'),
        new Depends('transitionEasing', 'topLeftX'),
        new Depends('defer', 'topLeftX')
    ];
    AMCP.MixerPerspectiveCommand = MixerPerspectiveCommand;
    /**
     *
     */
    class MixerStatusPerspectiveCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('PERSPECTIVE'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusPerspectiveParser);
            this._objectParams['keyword'] = 'PERSPECTIVE';
        }
    }
    MixerStatusPerspectiveCommand.commandString = 'MIXER';
    MixerStatusPerspectiveCommand.protocolLogic = [];
    AMCP.MixerStatusPerspectiveCommand = MixerStatusPerspectiveCommand;
    /**
     *
     */
    class MixerMipmapCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('MIPMAP')),
                new ParamSignature(optional, 'mipmap', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults(1, 0)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'MIPMAP';
        }
    }
    MixerMipmapCommand.commandString = 'MIXER';
    MixerMipmapCommand.protocolLogic = [
        new Depends('defer', 'mipmap')
    ];
    AMCP.MixerMipmapCommand = MixerMipmapCommand;
    /**
     *
     */
    class MixerStatusMipmapCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('MIPMAP'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusMipmapParser);
            this._objectParams['keyword'] = 'MIPMAP';
        }
    }
    MixerStatusMipmapCommand.commandString = 'MIXER';
    MixerStatusMipmapCommand.protocolLogic = [];
    AMCP.MixerStatusMipmapCommand = MixerStatusMipmapCommand;
    /**
     *
     */
    class MixerVolumeCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('VOLUME')),
                new ParamSignature(optional, 'volume', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'VOLUME';
        }
    }
    MixerVolumeCommand.commandString = 'MIXER';
    MixerVolumeCommand.protocolLogic = [
        new Depends('transitionDuration', 'volume'),
        new Depends('transitionEasing', 'volume'),
        new Depends('defer', 'volume')
    ];
    AMCP.MixerVolumeCommand = MixerVolumeCommand;
    /**
     *
     */
    class MixerStatusVolumeCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('VOLUME'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusVolumeParser);
            this._objectParams['keyword'] = 'VOLUME';
        }
    }
    MixerStatusVolumeCommand.commandString = 'MIXER';
    MixerStatusVolumeCommand.protocolLogic = [];
    AMCP.MixerStatusVolumeCommand = MixerStatusVolumeCommand;
    /**
     *
     */
    class MixerMastervolumeCommand extends AbstractChannelCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('MASTERVOLUME')),
                new ParamSignature(optional, 'mastervolume', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'MASTERVOLUME';
        }
    }
    MixerMastervolumeCommand.commandString = 'MIXER';
    MixerMastervolumeCommand.protocolLogic = [
        new Depends('transitionDuration', 'mastervolume'),
        new Depends('transitionEasing', 'mastervolume'),
        new Depends('defer', 'mastervolume')
    ];
    AMCP.MixerMastervolumeCommand = MixerMastervolumeCommand;
    /**
     *
     */
    class MixerStatusMastervolumeCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('MASTERVOLUME'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusMastervolumeParser);
            this._objectParams['keyword'] = 'MASTERVOLUME';
        }
    }
    MixerStatusMastervolumeCommand.commandString = 'MIXER';
    MixerStatusMastervolumeCommand.protocolLogic = [];
    AMCP.MixerStatusMastervolumeCommand = MixerStatusMastervolumeCommand;
    /**
     *
     */
    class MixerStraightAlphaOutputCommand extends AbstractChannelCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('STRAIGHT_ALPHA_OUTPUT')),
                new ParamSignature(optional, 'straight_alpha_output', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults(1, 0)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'STRAIGHT_ALPHA_OUTPUT';
        }
    }
    MixerStraightAlphaOutputCommand.commandString = 'MIXER';
    MixerStraightAlphaOutputCommand.protocolLogic = [
        new Depends('defer', 'straight_alpha_output')
    ];
    AMCP.MixerStraightAlphaOutputCommand = MixerStraightAlphaOutputCommand;
    /**
     *
     */
    class MixerStatusStraightAlphaOutputCommand extends AbstractLayerWithFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('STRAIGHT_ALPHA_OUTPUT'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.MixerStatusValidator, ResponseParsers_1.Response.MixerStatusStraightAlphaOutputParser);
            this._objectParams['keyword'] = 'STRAIGHT_ALPHA_OUTPUT';
        }
    }
    MixerStatusStraightAlphaOutputCommand.commandString = 'MIXER';
    MixerStatusStraightAlphaOutputCommand.protocolLogic = [];
    AMCP.MixerStatusStraightAlphaOutputCommand = MixerStatusStraightAlphaOutputCommand;
    /**
     *
     */
    class MixerGridCommand extends AbstractChannelCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('GRID')),
                new ParamSignature(optional, 'resolution', null, new ParamValidators_1.Validation.PositiveNumberRoundValidatorBetween(1)),
                new ParamSignature(optional, 'transitionDuration', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween()),
                new ParamSignature(optional, 'transitionEasing', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Ease)),
                new ParamSignature(optional, 'defer', null, new ParamValidators_1.Validation.BooleanValidatorWithDefaults('DEFER'))
            ];
            this._objectParams['keyword'] = 'GRID';
        }
    }
    MixerGridCommand.commandString = 'MIXER';
    AMCP.MixerGridCommand = MixerGridCommand;
    /**
     *
     */
    class MixerCommitCommand extends AbstractChannelCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('COMMIT'))
            ];
            this._objectParams['keyword'] = 'COMMIT';
        }
    }
    MixerCommitCommand.commandString = 'MIXER';
    AMCP.MixerCommitCommand = MixerCommitCommand;
    /**
     *
     */
    class MixerClearCommand extends AbstractChannelOrLayerCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'keyword', null, new ParamValidators_1.Validation.KeywordValidator('CLEAR'))
            ];
            this._objectParams['keyword'] = 'CLEAR';
        }
    }
    MixerClearCommand.commandString = 'MIXER';
    AMCP.MixerClearCommand = MixerClearCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * IChannel
 */
(function (AMCP) {
    /**
     *
     */
    class ClearCommand extends AbstractChannelOrLayerCommand {
    }
    ClearCommand.commandString = 'CLEAR';
    AMCP.ClearCommand = ClearCommand;
    /**
     *
     */
    class CallCommand extends AbstractLayerWithFallbackCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'seek', 'SEEK', new ParamValidators_1.Validation.FrameValidator('SEEK')),
                new ParamSignature(optional, 'loop', 'loop', new ParamValidators_1.Validation.PositiveNumberValidatorBetween(0, 1)),
                new ParamSignature(optional, 'in', 'IN', new ParamValidators_1.Validation.FrameValidator('IN')),
                new ParamSignature(optional, 'start', 'START', new ParamValidators_1.Validation.FrameValidator('START')),
                new ParamSignature(optional, 'out', 'OUT', new ParamValidators_1.Validation.FrameValidator('OUT')),
                new ParamSignature(optional, 'length', 'LENGTH', new ParamValidators_1.Validation.FrameValidator('LENGTH'))
            ];
        }
    }
    CallCommand.commandString = 'CALL';
    CallCommand.protocolLogic = [
        new OneOf('seek', 'loop', 'in', 'start', 'out', 'length')
    ];
    AMCP.CallCommand = CallCommand;
    /**
     *
     */
    class SwapCommand extends AbstractChannelOrLayerCommand {
        /**
         *
         */
        constructor() {
            super('1-1'); // @todo: foo
            // @todo: custom parameters dual layerOrchannel with 1 optional param
            // overloading in method
        }
    }
    SwapCommand.commandString = 'SWAP';
    AMCP.SwapCommand = SwapCommand;
    /**
     *
     */
    class AddCommand extends AbstractChannelCommand {
    }
    AddCommand.commandString = 'ADD';
    AMCP.AddCommand = AddCommand;
    /**
     *
     */
    class AddDecklinkCommand extends AbstractChannelOrLayerCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'device', 'DECKLINK', new ParamValidators_1.Validation.DecklinkDeviceValidator())
            ];
        }
    }
    AddDecklinkCommand.commandString = 'ADD';
    AMCP.AddDecklinkCommand = AddDecklinkCommand;
    /**
     *
     */
    class AddImageCommand extends AbstractChannelOrLayerCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', 'IMAGE', new ParamValidators_1.Validation.StringValidator())
            ];
        }
    }
    AddImageCommand.commandString = 'ADD';
    AMCP.AddImageCommand = AddImageCommand;
    /**
     *
     */
    class AddFileCommand extends AbstractChannelOrLayerCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', 'FILE', new ParamValidators_1.Validation.StringValidator())
            ];
        }
    }
    AddFileCommand.commandString = 'ADD';
    AMCP.AddFileCommand = AddFileCommand;
    /**
     *
     */
    class AddStreamCommand extends AbstractChannelOrLayerCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'uri', 'STREAM', new ParamValidators_1.Validation.StringValidator()),
                new ParamSignature(required, 'params', null, new ParamValidators_1.Validation.StringValidator())
            ];
        }
    }
    AddStreamCommand.commandString = 'ADD';
    AMCP.AddStreamCommand = AddStreamCommand;
    /**
     *
     */
    class RemoveCommand extends AbstractChannelOrLayerCommand {
    }
    RemoveCommand.commandString = 'REMOVE';
    AMCP.RemoveCommand = RemoveCommand;
    class RemoveDecklinkCommand extends AbstractChannelOrLayerCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'device', 'DECKLINK', new ParamValidators_1.Validation.DecklinkDeviceValidator())
            ];
        }
    }
    RemoveDecklinkCommand.commandString = 'REMOVE';
    AMCP.RemoveDecklinkCommand = RemoveDecklinkCommand;
    /**
     *
     */
    class RemoveImageCommand extends AbstractChannelOrLayerCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', 'IMAGE', new ParamValidators_1.Validation.StringValidator())
            ];
        }
    }
    RemoveImageCommand.commandString = 'REMOVE';
    AMCP.RemoveImageCommand = RemoveImageCommand;
    /**
     *
     */
    class RemoveFileCommand extends AbstractChannelOrLayerCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', 'FILE', new ParamValidators_1.Validation.StringValidator())
            ];
        }
    }
    RemoveFileCommand.commandString = 'REMOVE';
    AMCP.RemoveFileCommand = RemoveFileCommand;
    /**
     *
     */
    class RemoveStreamCommand extends AbstractChannelOrLayerCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'uri', 'STREAM', new ParamValidators_1.Validation.StringValidator())
            ];
        }
    }
    RemoveStreamCommand.commandString = 'REMOVE';
    AMCP.RemoveStreamCommand = RemoveStreamCommand;
    /**
     *
     */
    class PrintCommand extends AbstractChannelCommand {
    }
    PrintCommand.commandString = 'PRINT';
    AMCP.PrintCommand = PrintCommand;
    /**
     *
     */
    class SetCommand extends AbstractChannelCommand {
    }
    SetCommand.commandString = 'SET';
    AMCP.SetCommand = SetCommand;
    /**
     *
     */
    class LockCommand extends AbstractChannelCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'action', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Lock)),
                new ParamSignature(optional, 'phrase', null, new ParamValidators_1.Validation.StringValidator())
            ];
        }
    }
    LockCommand.commandString = 'LOCK';
    LockCommand.protocolLogic = [
        new Depends('action', 'phrase').ifNot('action', ServerStateEnum_1.Enum.Lock.RELEASE)
    ];
    AMCP.LockCommand = LockCommand;
    /**
     *
     */
    class ChannelGridCommand extends AbstractCommand {
    }
    ChannelGridCommand.commandString = 'CHANNEL_GRID';
    AMCP.ChannelGridCommand = ChannelGridCommand;
    /**
     *
     */
    class GlGCCommand extends AbstractCommand {
    }
    GlGCCommand.commandString = 'GL GC';
    AMCP.GlGCCommand = GlGCCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * IData
 */
(function (AMCP) {
    /**
     *
     */
    class DataStoreCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', null, new ParamValidators_1.Validation.DataNameValidator()),
                new ParamSignature(required, 'data', null, new ParamValidators_1.Validation.TemplateDataValidator())
            ];
        }
    }
    DataStoreCommand.commandString = 'DATA STORE';
    AMCP.DataStoreCommand = DataStoreCommand;
    /**
     *
     */
    class DataRetrieveCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', null, new ParamValidators_1.Validation.DataNameValidator())
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.DataValidator, ResponseParsers_1.Response.DataParser);
        }
    }
    DataRetrieveCommand.commandString = 'DATA RETRIEVE';
    AMCP.DataRetrieveCommand = DataRetrieveCommand;
    /**
     *
     */
    class DataListCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.DataListParser);
        }
    }
    DataListCommand.commandString = 'DATA LIST';
    AMCP.DataListCommand = DataListCommand;
    /**
     *
     */
    class DataRemoveCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', null, new ParamValidators_1.Validation.DataNameValidator())
            ];
        }
    }
    DataRemoveCommand.commandString = 'DATA REMOVE';
    AMCP.DataRemoveCommand = DataRemoveCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * IThumbnail
 */
(function (AMCP) {
    /**
     *
     */
    class ThumbnailListCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'subFolder', null, new ParamValidators_1.Validation.ClipNameValidator())
            ];
            // responseProtocol = new ResponseSignature(200, ResponseValidator.ListValidator, ResponseParser.ThumbnailListParser);
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.ThumbnailListParser);
        }
    }
    ThumbnailListCommand.commandString = 'THUMBNAIL LIST';
    AMCP.ThumbnailListCommand = ThumbnailListCommand;
    /**
     *
     */
    class ThumbnailRetrieveCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', null, new ParamValidators_1.Validation.ClipNameValidator())
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.Base64Validator, ResponseParsers_1.Response.ThumbnailParser);
        }
    }
    ThumbnailRetrieveCommand.commandString = 'THUMBNAIL RETRIEVE';
    AMCP.ThumbnailRetrieveCommand = ThumbnailRetrieveCommand;
    /**
     *
     */
    class ThumbnailGenerateCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', null, new ParamValidators_1.Validation.ClipNameValidator())
            ];
        }
    }
    ThumbnailGenerateCommand.commandString = 'THUMBNAIL GENERATE';
    AMCP.ThumbnailGenerateCommand = ThumbnailGenerateCommand;
    /**
     *
     */
    class ThumbnailGenerateAllCommand extends AbstractCommand {
    }
    ThumbnailGenerateAllCommand.commandString = 'THUMBNAIL GENERATE_ALL';
    AMCP.ThumbnailGenerateAllCommand = ThumbnailGenerateAllCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * IInfo
 */
(function (AMCP) {
    /**
     *
     */
    class CinfCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'fileName', null, new ParamValidators_1.Validation.ClipNameValidator())
            ];
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.CinfParser);
        }
    }
    CinfCommand.commandString = 'CINF';
    AMCP.CinfCommand = CinfCommand;
    /**
     *
     */
    class ClsCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'subFolder', null, new ParamValidators_1.Validation.ClipNameValidator())
            ];
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.ContentParser);
        }
    }
    ClsCommand.commandString = 'CLS';
    AMCP.ClsCommand = ClsCommand;
    /**
     *
     */
    class FlsCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.ContentParser);
        }
    }
    FlsCommand.commandString = 'FLS';
    AMCP.FlsCommand = FlsCommand;
    /**
     *
     */
    class TlsCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'subFolder', null, new ParamValidators_1.Validation.ClipNameValidator())
            ];
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.ContentParser);
        }
    }
    TlsCommand.commandString = 'TLS';
    AMCP.TlsCommand = TlsCommand;
    /**
     *
     */
    class VersionCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'component', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Version))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.StringValidator, ResponseParsers_1.Response.VersionParser);
        }
    }
    VersionCommand.commandString = 'VERSION';
    AMCP.VersionCommand = VersionCommand;
    /**
     *
     */
    class InfoCommand extends AbstractOrChannelOrLayerCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.ChannelParser);
            if (this.channel && this.channel > -1) {
                this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.XMLValidator, ResponseParsers_1.Response.InfoParser);
            }
        }
    }
    InfoCommand.commandString = 'INFO';
    AMCP.InfoCommand = InfoCommand;
    /**
     *
     */
    class InfoTemplateCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'template', null, new ParamValidators_1.Validation.TemplateNameValidator())
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.XMLValidator, ResponseParsers_1.Response.InfoTemplateParser);
        }
    }
    InfoTemplateCommand.commandString = 'INFO TEMPLATE';
    AMCP.InfoTemplateCommand = InfoTemplateCommand;
    /**
     *
     */
    class InfoConfigCommand extends AbstractCommand {
        /**
         *
         */
        constructor(params, context) {
            super(params, context);
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.XMLValidator, ResponseParsers_1.Response.ConfigParser);
        }
    }
    InfoConfigCommand.commandString = 'INFO CONFIG';
    AMCP.InfoConfigCommand = InfoConfigCommand;
    /**
     *
     */
    class InfoPathsCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.XMLValidator, ResponseParsers_1.Response.InfoPathsParser);
        }
    }
    InfoPathsCommand.commandString = 'INFO PATHS';
    AMCP.InfoPathsCommand = InfoPathsCommand;
    /**
     *
     */
    class InfoSystemCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.XMLValidator, ResponseParsers_1.Response.InfoSystemParser);
        }
    }
    InfoSystemCommand.commandString = 'INFO SYSTEM';
    AMCP.InfoSystemCommand = InfoSystemCommand;
    /**
     *
     */
    class InfoServerCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.XMLValidator, ResponseParsers_1.Response.InfoServerParser);
        }
    }
    InfoServerCommand.commandString = 'INFO SERVER';
    AMCP.InfoServerCommand = InfoServerCommand;
    /**
     *
     */
    class InfoQueuesCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.XMLValidator, ResponseParsers_1.Response.InfoQueuesParser);
        }
    }
    InfoQueuesCommand.commandString = 'INFO QUEUES';
    AMCP.InfoQueuesCommand = InfoQueuesCommand;
    /**
     *
     */
    class InfoThreadsCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.InfoThreadsParser);
        }
    }
    InfoThreadsCommand.commandString = 'INFO THREADS';
    AMCP.InfoThreadsCommand = InfoThreadsCommand;
    /**
     *
     */
    class InfoDelayCommand extends AbstractChannelOrLayerCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'delay', null, new ParamValidators_1.Validation.KeywordValidator('DELAY'))
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.XMLValidator, ResponseParsers_1.Response.InfoDelayParser);
            this._objectParams['delay'] = 'DELAY';
        }
    }
    InfoDelayCommand.commandString = 'INFO';
    AMCP.InfoDelayCommand = InfoDelayCommand;
    /**
     * @todo: response validator/parser
     */
    class CGInfoCommand extends AbstractLayerWithCgFallbackCommand {
        /**
         *
         */
        constructor(params) {
            super(params);
            this.paramProtocol = [
                new ParamSignature(required, 'info', null, new ParamValidators_1.Validation.KeywordValidator('INFO')),
                new ParamSignature(optional, 'flashLayer', null, new ParamValidators_1.Validation.PositiveNumberValidatorBetween())
            ];
            this.responseProtocol = new ResponseSignature(201);
            this._objectParams['info'] = 'INFO';
        }
    }
    CGInfoCommand.commandString = 'CG';
    AMCP.CGInfoCommand = CGInfoCommand;
    /**
     *
     */
    class GlInfoCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.XMLValidator, ResponseParsers_1.Response.GLParser);
        }
    }
    GlInfoCommand.commandString = 'GL INFO';
    AMCP.GlInfoCommand = GlInfoCommand;
    /**
     *
     */
    class LogLevelCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'level', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.LogLevel))
            ];
        }
    }
    LogLevelCommand.commandString = 'LOG LEVEL';
    AMCP.LogLevelCommand = LogLevelCommand;
    /**
     * @protocol	Needs either `calltrace` or `communication` parameter.
     */
    class LogCategoryCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'calltrace', ServerStateEnum_1.Enum.LogCategory.CALLTRACE.value, new ParamValidators_1.Validation.BooleanValidatorWithDefaults(1, 0)),
                new ParamSignature(optional, 'communication', ServerStateEnum_1.Enum.LogCategory.COMMUNICATION.value, new ParamValidators_1.Validation.BooleanValidatorWithDefaults(1, 0))
            ];
        }
    }
    LogCategoryCommand.commandString = 'LOG CATEGORY';
    LogCategoryCommand.protocolLogic = [
        new OneOf('calltrace', 'communication')
    ];
    AMCP.LogCategoryCommand = LogCategoryCommand;
    /**
     *
     */
    class DiagCommand extends AbstractCommand {
    }
    DiagCommand.commandString = 'DIAG';
    AMCP.DiagCommand = DiagCommand;
    /**
     * @todo: mixed mode!!!!
     * 202/201
     */
    class HelpCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'command', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Command))
            ];
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.HelpParser);
        }
    }
    HelpCommand.commandString = 'HELP';
    AMCP.HelpCommand = HelpCommand;
    /**
     *
     */
    class HelpProducerCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'producer', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Producer))
            ];
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.HelpParser);
        }
    }
    HelpProducerCommand.commandString = 'HELP PRODUCER';
    AMCP.HelpProducerCommand = HelpProducerCommand;
    /**
     *
     */
    class HelpConsumerCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'consumer', null, new ParamValidators_1.Validation.EnumValidator(ServerStateEnum_1.Enum.Consumer))
            ];
            this.responseProtocol = new ResponseSignature(200, ResponseValidators_1.Response.ListValidator, ResponseParsers_1.Response.HelpParser);
        }
    }
    HelpConsumerCommand.commandString = 'HELP CONSUMER';
    AMCP.HelpConsumerCommand = HelpConsumerCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * IOperation
 */
(function (AMCP) {
    /**
     * @todo: response
     */
    class ByeCommand extends AbstractCommand {
    }
    ByeCommand.commandString = 'BYE';
    AMCP.ByeCommand = ByeCommand;
    /**
     * @todo: response
     */
    class KillCommand extends AbstractCommand {
    }
    KillCommand.commandString = 'KILL';
    AMCP.KillCommand = KillCommand;
    /**
     * @todo: response
     */
    class RestartCommand extends AbstractCommand {
    }
    RestartCommand.commandString = 'RESTART';
    AMCP.RestartCommand = RestartCommand;
    class PingCommand extends AbstractCommand {
    }
    PingCommand.commandString = 'PING';
    AMCP.PingCommand = PingCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * IScheduling
 */
(function (AMCP) {
    class TimeCommand extends AbstractChannelCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'timecode', null, new ParamValidators_1.Validation.TimecodeValidator())
            ];
            this.responseProtocol = new ResponseSignature(201, ResponseValidators_1.Response.StringValidator, ResponseParsers_1.Response.InfoParser);
        }
    }
    TimeCommand.commandString = 'TIME';
    AMCP.TimeCommand = TimeCommand;
    class ScheduleSetCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'token', null, new ParamValidators_1.Validation.StringValidator()),
                new ParamSignature(required, 'timecode', null, new ParamValidators_1.Validation.TimecodeValidator()),
                new ParamSignature(required, 'command', null, new ParamValidators_1.Validation.CommandValidator())
            ];
        }
    }
    ScheduleSetCommand.commandString = 'SCHEDULE SET';
    AMCP.ScheduleSetCommand = ScheduleSetCommand;
    class ScheduleRemoveCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(required, 'token', null, new ParamValidators_1.Validation.StringValidator())
            ];
        }
    }
    ScheduleRemoveCommand.commandString = 'SCHEDULE REMOVE';
    AMCP.ScheduleRemoveCommand = ScheduleRemoveCommand;
    class ScheduleClearCommand extends AbstractCommand {
    }
    ScheduleClearCommand.commandString = 'SCHEDULE CLEAR';
    AMCP.ScheduleClearCommand = ScheduleClearCommand;
    class ScheduleListCommand extends AbstractCommand {
        constructor() {
            super(...arguments);
            this.paramProtocol = [
                new ParamSignature(optional, 'token', null, new ParamValidators_1.Validation.StringValidator())
            ];
        }
    }
    ScheduleListCommand.commandString = 'SCHEDULE LIST';
    AMCP.ScheduleListCommand = ScheduleListCommand;
})(AMCP = exports.AMCP || (exports.AMCP = {}));
/**
 * Factory
 */
var AMCPUtil;
(function (AMCPUtil) {
    /**
     *
     */
    function deSerialize(cmd, id) {
        // errror: commandstatus -1 //invalid command
        // @todo: error handling much?????? (callback??????)
        // let command: IAMCPCommand = Object.create((AMCP as any)[cmd._commandName]['prototype'])
        // command.constructor.call(command, cmd._objectParams)
        let command = new AMCP[cmd._commandName](cmd._objectParams);
        command.populate(cmd, id);
        return command;
    }
    AMCPUtil.deSerialize = deSerialize;
    /**
     *
     */
    class CasparCGSocketResponse {
        /**
         *
         */
        constructor(responseString) {
            this.items = [];
            this.token = CasparCGSocketResponse.parseToken(responseString);
            this.statusCode = CasparCGSocketResponse.evaluateStatusCode(responseString);
            this.responseString = responseString;
        }
        /**
         *
         */
        static evaluateStatusCode(responseString) {
            let token = CasparCGSocketResponse.parseToken(responseString);
            let index;
            if (token)
                index = token.length + 5;
            else
                index = 0;
            return parseInt(responseString.substr(index, 3), 10);
        }
        /**
         *
         */
        static parseToken(responseString) {
            if (responseString.substr(0, 3) === 'RES') {
                return responseString.substr(4).split(' ')[0]; // RES [token] RESPONSE
            }
            else {
                return undefined;
            }
        }
    }
    AMCPUtil.CasparCGSocketResponse = CasparCGSocketResponse;
})(AMCPUtil = exports.AMCPUtil || (exports.AMCPUtil = {}));
//# sourceMappingURL=AMCP.js.map